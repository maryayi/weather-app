{"version":3,"sources":["App.tsx","hooks/useWeather.ts","helpers/index.ts","reportWebVitals.ts","index.tsx"],"names":["WeatherBox","weather","loading","className","message","name","sys","country","src","icon","description","main","temp_min","temp","temp_max","App","initialState","useState","setWeather","setLoading","fetchWeather","cityName","a","result","fetch","process","then","resp","json","useWeather","setCityName","debouncedFetchWeather","useCallback","func","timer","timeout","args","clearTimeout","setTimeout","apply","debounce","useEffect","placeholder","type","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAUMA,EAAa,SAAC,GAAsD,IAAD,IAAnDC,eAAmD,MAAzC,KAAyC,MAAnCC,QACpC,YADuE,SAErE,qBAAKC,UAAU,qBAAf,wBAIGF,GACL,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAASG,SACX,qBAAKD,UAAU,qBAAf,SACGF,EAAQG,UAIX,sBAAKD,UAAU,cAAf,UACE,qBAAIA,UAAU,oBAAd,UACGF,EAAQI,KADX,KACmBJ,EAAQK,IAAIC,WAE/B,sBAAKJ,UAAU,sBAAf,UACE,qBAAKK,IAAG,2CAAsCP,EAAQA,QAAQ,GAAGQ,KAAzD,WAAwEN,UAAU,sBAC1F,mBAAGA,UAAU,2BAAb,SACGF,EAAQA,QAAQ,GAAGS,iBAGxB,wBAAOP,UAAU,qBAAjB,UACE,+BACE,oBAAIA,UAAU,2BAAd,sBACA,+BAAKF,EAAQU,KAAKC,SAAlB,eAEF,+BACE,sCACA,+BAAKX,EAAQU,KAAKE,KAAlB,eAEF,+BACE,oBAAIV,UAAU,0BAAd,sBACA,+BAAKF,EAAQU,KAAKG,SAAlB,qBA5Ba,MA6DRC,MAxBf,WACE,MCpDK,WAA0F,IAAtEC,EAAqE,uDAAjD,KAC7C,EAA8BC,mBAAcD,GAA5C,mBAAOf,EAAP,KAAgBiB,EAAhB,KACA,EAA8BD,oBAAkB,GAAhD,mBAAOf,EAAP,KAAgBiB,EAAhB,KAEMC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACfC,EAAS,KACbJ,GAAW,GAFQ,SAGJK,MAAM,qDAAD,OACmCH,EADnC,+BACkEI,qCAEnFC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UANF,OAGnBL,EAHmB,OAOnBJ,GAAW,GACXD,EAAWK,GARQ,2CAAH,sDAWlB,MAAO,CAACtB,EAASmB,EAAclB,GDqCU2B,GAAzC,mBAAO5B,EAAP,KAAgBmB,EAAhB,KAA8BlB,EAA9B,KACA,EAAgCe,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBS,EAAjB,KAEMC,EAAwBC,sBEzDzB,SAAkBC,GAAiD,IACpEC,EAD4CC,EAAuB,uDAAL,IAElE,OAAO,WAAmB,IAAD,uBAAdC,EAAc,yBAAdA,EAAc,gBACvBC,aAAaH,GACbA,EAAQI,YAAW,WAAQL,EAAKM,MAAM,KAAMH,KAAUD,IFqDdK,CAASpB,EAAc,KAAM,IAIvE,OAHAqB,qBAAU,WACRV,EAAsBV,KACrB,CAACA,IAEF,sBAAKlB,UAAU,MAAf,UACE,oBAAIA,UAAU,iBAAd,sCACA,uBACE,aAAW,aACXuC,YAAY,qBACZvC,UAAU,iBACVwC,KAAK,OACLC,MAAOvB,EACPwB,SAAU,SAAAC,GAAC,OAAIhB,EAAYgB,EAAEC,OAAOH,UAEtC,cAAC,EAAD,CAAY3C,QAASA,EAASC,QAASA,QG1D9B8C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3a76982.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport './App.css';\nimport { useWeather } from './hooks'\nimport { debounce } from './helpers'\n\ninterface IWeatherBox {\n  weather: any,\n  loading: boolean,\n}\n\nconst WeatherBox = ({ weather = null, loading = false }: IWeatherBox) => {\n  if (loading) return (\n    <div className=\"weather-box__error\">\n      Loading...\n    </div >\n  )\n  if (!weather) return null;\n  if (weather?.message) return (\n    <div className=\"weather-box__error\">\n      {weather.message}\n    </div >\n  )\n  return (\n    <div className='weather-box'>\n      <h2 className=\"weather-box__city\">\n        {weather.name}, {weather.sys.country}\n      </h2>\n      <div className=\"weather-box__result\">\n        <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} className='weather-box__icon' />\n        <p className=\"weather-box__description\">\n          {weather.weather[0].description}\n        </p>\n      </div>\n      <table className=\"weather-box__table\">\n        <tr>\n          <th className=\"weather-box__table--cold\">temp min</th>\n          <td>{weather.main.temp_min}&#8451;</td>\n        </tr>\n        <tr>\n          <th>temp</th>\n          <td>{weather.main.temp}&#8451;</td>\n        </tr>\n        <tr>\n          <th className=\"weather-box__table--hot\">temp max</th>\n          <td>{weather.main.temp_max}&#8451;</td>\n        </tr>\n      </table>\n    </div>\n  )\n};\n\n\n\nfunction App() {\n  const [weather, fetchWeather, loading] = useWeather();\n  const [cityName, setCityName] = useState('');\n\n  const debouncedFetchWeather = useCallback(debounce(fetchWeather, 500), []);\n  useEffect(() => {\n    debouncedFetchWeather(cityName);\n  }, [cityName]);\n  return (\n    <div className=\"App\">\n      <h1 className=\"weather__title\">Find weather of any city</h1>\n      <input\n        aria-label=\"city-input\"\n        placeholder=\"Enter city name...\"\n        className=\"weather__input\"\n        type=\"text\"\n        value={cityName}\n        onChange={e => setCityName(e.target.value)}\n      />\n      <WeatherBox weather={weather} loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport function useWeather(initialState: any = null): [any, (cityName: string) => any, boolean] {\n  const [weather, setWeather] = useState<any>(initialState);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const fetchWeather = async (cityName: string) => {\n    let result = null;\n    setLoading(true);\n    result = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\n    )\n      .then(resp => resp.json());\n    setLoading(false);\n    setWeather(result);\n  }\n\n  return [weather, fetchWeather, loading]\n}","export function debounce(func: (any: any) => any, timeout: number = 300) {\n  let timer: any;\n  return (...args: any) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => { func.apply(null, args); }, timeout);\n  };\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}